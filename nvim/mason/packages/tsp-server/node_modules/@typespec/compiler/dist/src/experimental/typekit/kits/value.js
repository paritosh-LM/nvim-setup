import { Numeric } from "../../../core/numeric.js";
import { defineKit } from "../define-kit.js";
defineKit({
    value: {
        is(value) {
            const type = value;
            return (this.value.isString(type) ||
                this.value.isNumeric(type) ||
                this.value.isBoolean(type) ||
                this.value.isArray(type) ||
                this.value.isObject(type) ||
                this.value.isEnum(type) ||
                this.value.isNull(type) ||
                this.value.isScalar(type));
        },
        create(value) {
            if (typeof value === "string") {
                return this.value.createString(value);
            }
            else if (typeof value === "number") {
                return this.value.createNumeric(value);
            }
            else {
                return this.value.createBoolean(value);
            }
        },
        createString(value) {
            return {
                entityKind: "Value",
                value: value,
                valueKind: "StringValue",
                type: this.literal.createString(value),
                scalar: undefined,
            };
        },
        createNumeric(value) {
            const valueAsString = String(value);
            return {
                entityKind: "Value",
                value: Numeric(valueAsString),
                valueKind: "NumericValue",
                type: this.literal.createNumeric(value),
                scalar: undefined,
            };
        },
        createBoolean(value) {
            return {
                entityKind: "Value",
                value: value,
                valueKind: "BooleanValue",
                type: this.literal.createBoolean(value),
                scalar: undefined,
            };
        },
        isBoolean(type) {
            return type.valueKind === "BooleanValue";
        },
        isString(type) {
            return type.valueKind === "StringValue";
        },
        isNumeric(type) {
            return type.valueKind === "NumericValue";
        },
        isArray(type) {
            return type.valueKind === "ArrayValue";
        },
        isObject(type) {
            return type.valueKind === "ObjectValue";
        },
        isEnum(type) {
            return type.valueKind === "EnumValue";
        },
        isNull(type) {
            return type.valueKind === "NullValue";
        },
        isScalar(type) {
            return type.valueKind === "ScalarValue";
        },
    },
});
//# sourceMappingURL=value.js.map