import { Discriminator } from "../../../core/intrinsic-type-state.js";
import { Enum, Model, Scalar, Union, type Type } from "../../../core/types.js";
/**  @experimental */
export interface TypeTypekit {
    /**
     * Clones a type and adds it to the typekit's realm.
     * @param type Type to clone
     */
    clone<T extends Type>(type: T): T;
    /**
     * Finishes a type, applying all the decorators.
     */
    finishType(type: Type): void;
    /**
     * Checks if a type is decorated with @error
     * @param type The type to check.
     */
    isError(type: Type): boolean;
    /**
     * Get the name of this type in the specified encoding.
     */
    getEncodedName(type: Type & {
        name: string;
    }, encoding: string): string;
    /**
     * Get the summary of this type as specified by the `@summary` decorator.
     *
     * @param type The type to get the summary for.
     */
    getSummary(type: Type): string | undefined;
    /**
     * Get the documentation of this type as specified by the `@doc` decorator or
     * the JSDoc comment.
     *
     * @param type The type to get the documentation for.
     */
    getDoc(type: Type): string | undefined;
    /**
     * Get the plausible name of a type. If the type has a name, it will use it otherwise it will try generate a name based on the context.
     * If the type can't get a name, it will return an empty string.
     * If the type is a TemplateInstance, it will prefix the name with the template arguments.
     * @param type The scalar to get the name of.z
     */
    getPlausibleName(type: Model | Union | Enum | Scalar): string;
    /**
     * Resolves the discriminator for a discriminated union. Returns undefined if the type is not a discriminated union.
     * @param type
     */
    getDiscriminator(type: Model | Union): Discriminator | undefined;
    /**
     * Gets the maximum value for a numeric or model property type.
     * @param type type to get the maximum value for
     */
    maxValue(type: Type): number | undefined;
    /**
     * Gets the minimum value for a numeric or model property type.
     * @param type type to get the minimum value for
     */
    minValue(type: Type): number | undefined;
    /**
     * Gets the maximum value this numeric type should be, exclusive of the given value.
     * @param type
     */
    maxValueExclusive(type: Type): number | undefined;
    /**
     * Gets the minimum value this numeric type should be, exclusive of the given value.
     * @param type type to get the minimum value for
     */
    minValueExclusive(type: Type): number | undefined;
    /**
     * Gets the maximum length for a string type.
     * @param type type to get the maximum length for
     */
    maxLength(type: Type): number | undefined;
    /**
     * Gets the minimum length for a string type.
     * @param type type to get the minimum length for
     */
    minLength(type: Type): number | undefined;
    /**
     * Gets the maximum number of items for an array type.
     * @param type type to get the maximum number of items for
     */
    maxItems(type: Type): number | undefined;
    /**
     * Gets the minimum number of items for an array type.
     * @param type type to get the minimum number of items for
     */
    minItems(type: Type): number | undefined;
    /**
     * Checks if the given type is a never type.
     */
    isNever(type: Type): boolean;
    /**
     * Checks if the given type is a user defined type. Non-user defined types are defined in the compiler or other libraries imported by the spec.
     * @param type The type to check.
     * @returns True if the type is a user defined type, false otherwise.
     */
    isUserDefined(type: Type): boolean;
}
interface TypekitExtension {
    /**
     * Utilities for working with general types.
     * @experimental
     */
    type: TypeTypekit;
}
declare module "../define-kit.js" {
    interface Typekit extends TypekitExtension {
    }
}
export {};
//# sourceMappingURL=type.d.ts.map