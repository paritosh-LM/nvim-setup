import type { ArrayValue, BooleanValue, EnumValue, NullValue, NumericValue, ObjectValue, ScalarValue, StringValue, Value } from "../../../core/types.js";
/** @experimental */
export interface ValueKit {
    /**
     * Create a Value type from a JavaScript value.
     *
     * @param value The JavaScript value to turn into a TypeSpec Value type.
     */
    create(value: string | number | boolean): Value;
    /**
     * Create a string Value type from a JavaScript string value.
     *
     * @param value The string value.
     */
    createString(value: string): StringValue;
    /**
     * Create a numeric Value type from a JavaScript number value.
     *
     * @param value The numeric value.
     */
    createNumeric(value: number): NumericValue;
    /**
     * Create a boolean Value type from a JavaScript boolean value.
     *
     * @param value The boolean value.
     */
    createBoolean(value: boolean): BooleanValue;
    /**
     * Check if `type` is a string Value type.
     *
     * @param type The type to check.
     */
    isString(type: Value): type is StringValue;
    /**
     * Check if `type` is a numeric Value type.
     *
     * @param type The type to check.
     */
    isNumeric(type: Value): type is NumericValue;
    /**
     * Check if `type` is a scalar value type
     * @param type The type to check.
     */
    isScalar(type: Value): type is ScalarValue;
    /**
     * Check if `type` is an object value type
     * @param type The type to check.
     */
    isObject(type: Value): type is ObjectValue;
    /**
     * Check if `type` is an array value type
     * @param type The type to check.
     */
    isArray(type: Value): type is ArrayValue;
    /**
     * Check if `type` is an enum value type
     * @param type The type to check.
     */
    isEnum(type: Value): type is EnumValue;
    /**
     * Check if `type` is a null value Type.
     * @param type The type to check.
     */
    isNull(type: Value): type is NullValue;
    /**
     * Check if `type` is a boolean Value type.
     *
     * @param type The type to check.
     */
    isBoolean(type: Value): type is BooleanValue;
    is(type: {
        valueKind: string;
    }): type is Value;
}
interface TypekitExtension {
    /** @experimental */
    value: ValueKit;
}
declare module "../define-kit.js" {
    interface Typekit extends TypekitExtension {
    }
}
export {};
//# sourceMappingURL=value.d.ts.map