import { getEffectiveModelType } from "../../../core/checker.js";
import { ignoreDiagnostics } from "../../../core/diagnostics.js";
import { getDiscriminatedUnionFromInheritance, } from "../../../core/helpers/discriminator-utils.js";
import { getDiscriminator } from "../../../core/intrinsic-type-state.js";
import { createRekeyableMap } from "../../../utils/misc.js";
import { defineKit } from "../define-kit.js";
import { copyMap, decoratorApplication } from "../utils.js";
const spreadCache = new Map();
defineKit({
    model: {
        create(desc) {
            const properties = createRekeyableMap(Array.from(Object.entries(desc.properties)));
            const model = this.program.checker.createType({
                kind: "Model",
                name: desc.name ?? "",
                decorators: decoratorApplication(this, desc.decorators),
                properties: properties,
                node: undefined,
                derivedModels: desc.derivedModels ?? [],
                sourceModels: desc.sourceModels ?? [],
                indexer: desc.indexer,
            });
            this.program.checker.finishType(model);
            return model;
        },
        is(type) {
            return type.kind === "Model";
        },
        isExpresion(type) {
            return type.name === "";
        },
        getEffectiveModel(model, filter) {
            return getEffectiveModelType(this.program, model, filter);
        },
        getSpreadType(model) {
            if (spreadCache.has(model)) {
                return spreadCache.get(model);
            }
            if (!model.indexer) {
                return undefined;
            }
            if (model.indexer.key.name === "string") {
                const record = this.record.create(model.indexer.value);
                spreadCache.set(model, record);
                return record;
            }
            if (model.indexer.key.name === "integer") {
                const array = this.array.create(model.indexer.value);
                spreadCache.set(model, array);
                return array;
            }
            return model.indexer.value;
        },
        getProperties(model, options = {}) {
            // Add explicitly defined properties
            const properties = copyMap(model.properties);
            // Add discriminator property if it exists
            const discriminator = this.type.getDiscriminator(model);
            if (discriminator) {
                const discriminatorName = discriminator.propertyName;
                properties.set(discriminatorName, this.modelProperty.create({ name: discriminatorName, type: this.builtin.string }));
            }
            if (options.includeExtended) {
                let base = model.baseModel;
                while (base) {
                    for (const [key, value] of base.properties) {
                        if (!properties.has(key)) {
                            properties.set(key, value);
                        }
                    }
                    base = base.baseModel;
                }
            }
            // TODO: Add Spread?
            return properties;
        },
        getAdditionalPropertiesRecord(model) {
            // model MyModel is Record<> {} should be model with additional properties
            if (this.model.is(model) && model.sourceModel && this.record.is(model.sourceModel)) {
                return model.sourceModel;
            }
            // model MyModel extends Record<> {} should be model with additional properties
            if (model.baseModel && this.record.is(model.baseModel)) {
                return model.baseModel;
            }
            // model MyModel { ...Record<>} should be model with additional properties
            const spread = this.model.getSpreadType(model);
            if (spread && this.model.is(spread) && this.record.is(spread)) {
                return spread;
            }
            if (model.baseModel) {
                return this.model.getAdditionalPropertiesRecord(model.baseModel);
            }
            return undefined;
        },
        getDiscriminatedUnion(model) {
            const discriminator = getDiscriminator(this.program, model);
            if (!discriminator) {
                return undefined;
            }
            return ignoreDiagnostics(getDiscriminatedUnionFromInheritance(model, discriminator));
        },
    },
});
//# sourceMappingURL=model.js.map