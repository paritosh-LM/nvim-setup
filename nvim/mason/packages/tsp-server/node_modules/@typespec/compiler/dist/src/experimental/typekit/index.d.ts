import type { Program } from "../../core/program.js";
import { Realm } from "../realm.js";
import { Typekit } from "./define-kit.js";
export * from "./define-kit.js";
export * from "./kits/index.js";
/**
 * Create a new Typekit that operates in the given realm.
 *
 * Ordinarily, you should use the default typekit `$` to manipulate types in the current program, or call `$` with a
 * Realm or Program as the first argument if you want to work in a specific realm or in the default typekit realm of
 * a specific program.
 *
 * @param realm - The realm to create the typekit in.
 *
 * @experimental
 */
export declare function createTypekit(realm: Realm): Typekit;
/** @experimental */
interface DefaultTypekit extends Typekit {
    /**
     * Create or get the default typekit for the given Realm.
     *
     * @see {@link Realm}
     *
     * @param realm - The realm to get the typekit for.
     * @returns The default typekit for the realm.
     */
    (realm: Realm): Typekit;
    /**
     * Create or get the default typekit for the given Program.
     *
     * If a default typekit realm for the given program does not exist, one will be created.
     *
     * @param program - The program to get the typekit for.
     * @returns The default typekit for the program.
     */
    (program: Program): Typekit;
}
/**
 * Typekit - Utilities for working with TypeSpec types.
 *
 * The default typekit `$` can be used to manipulate types in the current program.
 *
 * Each typekit is associated with a Realm in which it operates. The default typekit
 * will use the default typekit realm for the current program.
 *
 * Alternatively, to work in a specific realm, you can get the typekit associated
 * with that realm by calling `$` with the realm as an argument, or by calling
 * `$` with a program as an argument (in this case, it will use that program's
 * default typekit realm or create one if it does not already exist).
 *
 * @example
 * ```ts
 * import { $ } from "@typespec/compiler/experimental";
 *
 * const clone = $.type.clone(inputType);
 * ```
 *
 * @example
 * ```ts
 * import { $, Realm } from "@typespec/compiler/experimental";
 *
 * const realm = new Realm(program, "my custom realm");
 *
 * const clone = $(realm).type.clone(inputType);
 * ```
 *
 * @example
 * ```ts
 * import { $ } from "@typespec/compiler/experimental";
 *
 * const projectedProgram = projectProgram(program, ...);
 *
 * const clone = $(projectedProgram).type.clone(inputType);
 * ```
 *
 * @see {@link Realm}
 *
 * @experimental
 */
export declare const $: DefaultTypekit;
//# sourceMappingURL=index.d.ts.map