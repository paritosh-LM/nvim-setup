import type { Enum, EnumMember, Type, Union } from "../../../core/types.js";
import { DecoratorArgs } from "../utils.js";
/**
 * Describes an enum type for creation.
 * @experimental
 */
interface EnumDescriptor {
    /**
     * The name of the enum declaration.
     */
    name: string;
    /**
     * Decorators to apply to the enum.
     */
    decorators?: DecoratorArgs[];
    /**
     * The members of the enum. If a member is an object, each property will be
     * converted to an EnumMember with the same name and value.
     */
    members?: Record<string, string | number> | EnumMember[];
}
/**
 * A kit for working with enum types.
 * @experimental
 */
export interface EnumKit {
    /**
     * Build an enum type. The enum type will be finished (i.e. decorators are
     * run).
     */
    create(desc: EnumDescriptor): Enum;
    /**
     * Build an equivalent enum from the given union. Union variants which are
     * not valid enum members are skipped. You can check if a union is a valid
     * enum with {@link UnionKit.union}'s `isEnumValue`.
     */
    createFromUnion(type: Union): Enum;
    /**
     * Check if `type` is an enum type.
     *
     * @param type the type to check.
     */
    is(type: Type): type is Enum;
}
interface TypekitExtension {
    /** @experimental */
    enum: EnumKit;
}
declare module "../define-kit.js" {
    interface Typekit extends TypekitExtension {
    }
}
export {};
//# sourceMappingURL=enum.d.ts.map